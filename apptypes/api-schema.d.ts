/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/cognito/forgotpassword': {
    post: {
      requestBody?: {
        content: {
          'application/json': string
          'text/json': string
          'application/*+json': string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/collection/{id}': {
    get: {
      parameters: {
        path: {
          id: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
    put: {
      parameters: {
        path: {
          id: string
        }
      }
      requestBody?: {
        content: {
          'application/json': components['schemas']['CollectionModel']
          'text/json': components['schemas']['CollectionModel']
          'application/*+json': components['schemas']['CollectionModel']
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
    delete: {
      parameters: {
        path: {
          id: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/collection/user': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/collection': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['CollectionModel']
          'text/json': components['schemas']['CollectionModel']
          'application/*+json': components['schemas']['CollectionModel']
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/onetimeshare/{id}': {
    get: {
      parameters: {
        query?: {
          salt?: string
        }
        path: {
          id: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['OneTimeShareRequestModel']
            'application/json': components['schemas']['OneTimeShareRequestModel']
            'text/json': components['schemas']['OneTimeShareRequestModel']
          }
        }
      }
    }
  }
  '/api/onetimeshare': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['OneTimeShareRequestModel']
          'text/json': components['schemas']['OneTimeShareRequestModel']
          'application/*+json': components['schemas']['OneTimeShareRequestModel']
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/organization/{id}': {
    get: {
      parameters: {
        path: {
          id: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
    put: {
      parameters: {
        path: {
          id: string
        }
      }
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrganizationRequestModel']
          'text/json': components['schemas']['OrganizationRequestModel']
          'application/*+json': components['schemas']['OrganizationRequestModel']
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
    delete: {
      parameters: {
        path: {
          id: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/organization/user': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/organization': {
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrganizationRequestModel']
          'text/json': components['schemas']['OrganizationRequestModel']
          'application/*+json': components['schemas']['OrganizationRequestModel']
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/secret/{id}': {
    get: {
      parameters: {
        path: {
          id: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: {
            'text/plain': components['schemas']['SecretResponseModel']
            'application/json': components['schemas']['SecretResponseModel']
            'text/json': components['schemas']['SecretResponseModel']
          }
        }
      }
    }
    put: {
      parameters: {
        path: {
          id: string
        }
      }
      requestBody?: {
        content: {
          'application/json': components['schemas']['SecretWithCollectionsRequestModel']
          'text/json': components['schemas']['SecretWithCollectionsRequestModel']
          'application/*+json': components['schemas']['SecretWithCollectionsRequestModel']
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
    delete: {
      parameters: {
        path: {
          id: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/secret/{currentPage}/{pageSize}': {
    get: {
      parameters: {
        path: {
          currentPage: number
          pageSize: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/secret': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['SecretWithCollectionsRequestModel']
          'text/json': components['schemas']['SecretWithCollectionsRequestModel']
          'application/*+json': components['schemas']['SecretWithCollectionsRequestModel']
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/secret/{secretType}/{currentPage}/{pageSize}': {
    get: {
      parameters: {
        path: {
          secretType: components['schemas']['SecretType']
          currentPage: number
          pageSize: number
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/secret/all/{secretType}': {
    get: {
      parameters: {
        path: {
          secretType: components['schemas']['SecretType']
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/secret/collection/{collectionid}': {
    get: {
      parameters: {
        path: {
          collectionid: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/secret/bulkdelete': {
    delete: {
      requestBody?: {
        content: {
          'application/json': string[]
          'text/json': string[]
          'application/*+json': string[]
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/user': {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
    post: {
      requestBody?: {
        content: {
          'application/json': components['schemas']['UserModel']
          'text/json': components['schemas']['UserModel']
          'application/*+json': components['schemas']['UserModel']
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/api/user/{id}': {
    put: {
      parameters: {
        path: {
          id: string
        }
      }
      requestBody?: {
        content: {
          'application/json': components['schemas']['UserModel']
          'text/json': components['schemas']['UserModel']
          'application/*+json': components['schemas']['UserModel']
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
    delete: {
      parameters: {
        path: {
          id: string
        }
      }
      responses: {
        /** @description Success */
        200: {
          content: never
        }
      }
    }
  }
  '/weatherforecast': {
    get: operations['GetWeatherForecast']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    CollectionModel: {
      name: string
      type?: components['schemas']['SecretCollectionType']
      /** Format: uuid */
      organizationId?: string | null
    }
    CollectionSecretModel: {
      /** Format: uuid */
      collectionId?: string
      name?: string | null
    }
    DateOnly: {
      /** Format: int32 */
      year?: number
      /** Format: int32 */
      month?: number
      /** Format: int32 */
      day?: number
      dayOfWeek?: components['schemas']['DayOfWeek']
      /** Format: int32 */
      dayOfYear?: number
      /** Format: int32 */
      dayNumber?: number
    }
    /** @enum {string} */
    DayOfWeek: 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday'
    OneTimeShareRequestModel: {
      content: string
      /** Format: date-time */
      expiresAt?: string
      /** Format: int32 */
      accessCount?: number
      salt?: string | null
      iv?: string | null
    }
    OrganizationRequestModel: {
      name: string
      description?: string | null
    }
    /** @enum {string} */
    SecretCollectionType: 'user' | 'organization'
    SecretModel: {
      name: string
      type?: components['schemas']['SecretType']
      content?: string | null
      isShared?: boolean
    }
    SecretResponseModel: {
      /** Format: uuid */
      id?: string
      name?: string | null
      type?: components['schemas']['SecretType']
      content?: string | null
      isShared?: boolean
      /** Format: date-time */
      createdAt?: string
      createdBy?: string | null
      collectionSecretModels?: Array<components["schemas"]["CollectionSecretModel"]> | null
    }
    /** @enum {string} */
    SecretType: 'password' | 'secure_notes' | 'bank_accounts' | 'payment_card' | 'addresses' | 'plain_text' | 'environment_variables'
    SecretWithCollectionsRequestModel: {
      secret?: components['schemas']['SecretModel']
      collectionIds?: string[] | null
    }
    UserModel: {
      /** Format: uuid */
      userId?: string | null
      /** Format: uuid */
      paymentPlanId?: string | null
      key: string
    }
    WeatherForecast: {
      date?: components['schemas']['DateOnly']
      /** Format: int32 */
      temperatureC?: number
      /** Format: int32 */
      temperatureF?: number
      summary?: string | null
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {

  GetWeatherForecast: {
    responses: {
      /** @description Success */
      200: {
        content: {
          'text/plain': Array<components["schemas"]["WeatherForecast"]>
          'application/json': Array<components["schemas"]["WeatherForecast"]>
          'text/json': Array<components["schemas"]["WeatherForecast"]>
        }
      }
    }
  }
}
